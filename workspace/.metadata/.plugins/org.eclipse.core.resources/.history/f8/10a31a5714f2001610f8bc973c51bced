
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.junit.Before;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.Assert;
import org.testng.ITestResult;
//import org.testng.annotations.AfterMethod;

import org.testng.annotations.AfterMethod;
//import org.testng.annotations.BeforeTest;
//import org.testng.annotations.Test;

public class Wellness_Demo {
	String driverPath = "C:\\geaco\\";
	
	private static final String CONTAINER_SELECTOR = "white-box-cms-wrap";
	WebDriver driver;

	@Before
	public void Setup() throws Exception {
		// Launch browser
		System.out.println("launching firefox browser"); 
		System.setProperty("webdriver.gecko.driver", driverPath+"geckodriver.exe");
		driver = new FirefoxDriver();
		driver.manage().window().maximize();
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().implicitlyWait(1, TimeUnit.MINUTES);
		driver.get("http://demo-meschinowellness.azurewebsites.net/Account/Login");
		driver.manage().timeouts().implicitlyWait(1, TimeUnit.MINUTES);
	}


	@Test//(priority = 1)
	public void login() throws Exception {
		// Enter Username
		driver.findElement(By.id("UserName")).click();
		Thread.sleep(1000);
		driver.findElement(By.id("UserName")).sendKeys("M2HRAtest@gmail.com");
		// Enter password
		driver.findElement(By.xpath("/html/body/div[3]/form/div[2]/div/input")).click();
		driver.findElement(By.xpath("/html/body/div[3]/form/div[2]/div/input")).sendKeys("Test123@");
		// Click on login button
		driver.findElement(By.xpath("/html/body/div[3]/form/div[3]/div/div[2]/button")).click();
		driver.manage().timeouts().implicitlyWait(1, TimeUnit.MINUTES);
		// Click on close button
		//driver.findElement(By.xpath("/html/body/div[8]/div/div/div/div/div[2]/div/a[2]")).click();
		Thread.sleep(5000);
		// Verfiy Dashboard
		if (driver.findElement(By.id("dashboard")) != null) {
			System.out.println("Dashboard Title  is verified");
		} else {
			System.out.println("Dashboard Title  is not  Present");
		}
		Thread.sleep(5000);
		System.out.println("User login successful");
	//}

	//@Test//(priority = 2)
	//public void MyHealthRiskConsiderations() throws Exception {
		// Click on My Wellness Report tab
		driver.findElement(By.id("riskreportNew")).click();
		Thread.sleep(5000);
		/*
		// Click on what is this link
		WebElement Linkcontainer = driver.findElement(By.className("bmi-list"));
		WebElement whatisthislink = Linkcontainer.findElement(By.id("btnBioAgeScorePopup"));
		whatisthislink.click();
		// Click on close button
		driver.findElement(By.xpath("/html/body/div[8]/div/div/div/div/div/div/div/a")).click();
		Thread.sleep(5000);
		// Click on MHR what is this link
		WebElement MhrScorePopup = Linkcontainer.findElement(By.id("btnMHRScorePopup"));
		MhrScorePopup.click();
		Thread.sleep(3000);
		// Click on MHR close button
		driver.findElement(By.xpath("/html/body/div[8]/div/div/div/div/div[2]/div/a")).click();
		*/
		Thread.sleep(5000);
		
		ArrayList<WebElement> list = getListOfLinks("tracking-tools", 0);
		Assert.assertNotEquals(0, list.size());
		for (int i = 0, l = list.size(); i < l; i++) {
			validateLinkAndRelatedPage("tracking-tools", 0, i, "wbc-heading", "h3", "button");
		}
		System.out.println("MyHealthRiskConsiderations test completed.");
		Thread.sleep(10000);
	//}

	//@Test//(priority = 3)
	//public void MyHealthIssues() throws Exception {
		System.out.println("MyHealthIssues test started.");
		// d.manage().timeouts().implicitlyWait(1, TimeUnit.MINUTES);
		// Click on My Wellness Report tab
		// d.findElement(By.id("riskreportNew")).click();
		ArrayList<WebElement> list1 = getListOfLinks("tracking-tools", 1);
		Assert.assertNotEquals(0, list1.size());
		for (int i = 0, l = list1.size(); i < l; i++) {
			validateLinkAndRelatedPage("tracking-tools", 1, i, "active-goal-heading", "h2", "a");
		}
	}

	private ArrayList<WebElement> getListOfLinks(String sectionName, int index) {
		ArrayList<WebElement> sections = (ArrayList<WebElement>) driver.findElements(By.className(sectionName));
		if (sections.size() > 0) {
			WebElement section = sections.get(index);
			// Get the track-list
			WebElement listContainer = (WebElement) section.findElements(By.className("track-list")).get(0);
			ArrayList<WebElement> list = (ArrayList<WebElement>) listContainer.findElements(By.tagName("li"));
			return list;
		}
		return null;
	}

	/*
	 * Map Dietary Assessment_Links - List<String> Dietary Assessment_Italics -
	 * List<String> Dietary Assessment_Strong - List<String>
	 */
	public static Map<String, List<String>> EXPECTED_STRINGS = new HashMap<String, List<String>>();
	{
		/**
		 * Map Format: Key = LinkText_<format> - Eg: Dietary Assessment_Strong,
		 * Dietary Assessment_Italics Value = List of expected strings
		 */
		// Bold strings Dietary Assessment
		EXPECTED_STRINGS.put("Dietary Assessment_Strong",
				Arrays.asList("Introduction to Your Dietary Assessment",
					"The Meschino Optimal Living Program",
					"Your Personal Feedback Report",
					"Based upon your responses",
					"38.00",
					"Using cream in your coffee or tea can significantly add more saturated fat and cholesterol to your daily diet. It is far better to use 1% or non-fat milk for this purpose.",
					"Your frequent consumption of whole eggs is of some concern",
					"Your frequent intake of fried foods is of some concern",
					"Your frequent intake of high fat pastries and related treats is a cause for some concern",
					"Your frequent consumption of fried snack foods and/or chocolate bars (or other high fat chocolate products) is a cause for some concern",
					"Your frequent intake of sugary candies, and/or soda pops is a cause for some concern.",
					"Your diet appears to lack proper attention to the intake of vegetables.",
					"Your diet appears to lack proper attention to fruit intake.",
					"Your frequent consumption of alcohol may be a cause for some concern",
					"You indicated that on a weekly basis you often have 4 alcoholic drinks or more on at least one day of the week.",
					"You indicated that you eat high fat meat products 3 or more times per week and consume very little, if any, high fat dairy products,",
					"Your practice of using butter on baked potatoes or included in the cooking of vegetables, eggs or sauces etc. is a cause for concern."));

		// Links Dietary Assessment
		EXPECTED_STRINGS.put("Dietary Assessment_Links",
				Arrays.asList("http://demo-meschinowellness.azurewebsites.net/LearnEarn/LearningInfoByModule/144"));

		// Bold strings Body Composition
		EXPECTED_STRINGS.put("Body Composition_Strong",
				Arrays.asList("Your Body Mass Index is: 62.69",
					"This places you in the Grade 3 overweight category,",
					"Intensive Weight Loss Plan",
					"Waist Circumference",
					"Your present waist circumference is",
					"38."));
		// Links Body Composition_
		EXPECTED_STRINGS.put("Body Composition_Links",
				Arrays.asList("https://meschinowellness.blob.core.windows.net/downloads/Intensive%20Weight%20Loss%20Plan.pdf",
					"http://demo-meschinowellness.azurewebsites.net/ResearchReviews/ContentInfo/Part_1_Clinical_Weight_Loss_Program",
					"http://demo-meschinowellness.azurewebsites.net/ResearchReviews/ContentInfo/Part_2_Clinical_Weight_Loss_Program",
					"http://demo-meschinowellness.azurewebsites.net/ResearchReviews/ContentInfo/Part_3_Clinical_Weight_Loss_Program",
					"http://demo-meschinowellness.azurewebsites.net/MyWellnessWallet/MyHealthProfile/ViewWeightTrackerDetail?healthActivityId=8"));

		// Bold strings Physical Activity
		EXPECTED_STRINGS.put("Physical Activity_Strong",
				Arrays.asList("Endurance / Aerobic Activity",
					"You indicated that you perform endurance/aerobic exercise for 50 minutes or less per week, on average.",
					"Based upon your present age, your aerobic training zone is between 89 and 126 heart beats per minute.",
					"Resistance / Strength Training",
					"You indicated that you regularly perform resistance or strength training once a week.",
					"Principles of Strength Training: Sets – Reps – Resistance",
					"your protein requirement would be approximately 150 grams per day.",
					"Flexibility / Stretching Exercise"));

		// Links Physical Activity
		EXPECTED_STRINGS.put("Physical Activity_Links",
				Arrays.asList());

		// Bold strings Basic Supplement Considerations
		EXPECTED_STRINGS.put("Basic Supplement Considerations_Strong",
				Arrays.asList());

		// Links Basic Supplement Considerations
		EXPECTED_STRINGS.put("Basic Supplement Considerations_Links",
				Arrays.asList("http://www.nature.com/nrc/journal/v4/n3/full/nrc1298.html",
						"http://www.pnas.org/content/110/23/9523.short",
						"http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0012244",
						"http://www.sciencedaily.com/releases/2010/09/100912213050.htm"));

		// Bold strings Nutrient Deficiencies and Depletion of Nutrients
		EXPECTED_STRINGS.put("Nutrient Deficiencies and Depletion of Nutrients_Strong", 
				Arrays.asList("Nutrient Deficiencies and Depletion of Nutrients",
						"Consuming more than 3 alcoholic beverages per week, on average, is associated with depletion of the following nutrients",
						"Your diet appears to lack sufficient intake of fruits and vegetables.",
						"Flaky Seborrheic Condition",
						"Soft Nails or Nails that Chip, Crack or Peel easily,",
						"White Spots under your Fingernails",
						"Red spots under the Skin are often an Indicator of Vitamin C Deficienc",
						"Drinking More Than Two Cups of Caffeinated Beverages",
						"Your regular use of laxatives is associated with depletion of the following nutrients",
						"Your regular use of pain-killers and/or anti-inflammatory drugs is associated with depletion",
						"Your regular use of barbiturate drugs is associated with depletion of the following nutrients:",
						"Your regular use of antidepressant drugs is associated with depletion of the following nutrients",
						"Your regular use of amphetamines is associated with depletion",
						"Your regular use of anticonvulsant phenytoin drugs is associated with depletion of the following nutrients:",
						"Your regular use of antibiotics is associated with depletion of the following nutrients",
						"Your regular use of statin drugs for high cholesterol is associated with depletion of Coenzyme Q10.",
						"Your regular use of ACE-Inhibitor drugs",
						"Your regular use of an anti-gout drug is associated with depletion",
						"Stress"));

		// Links Nutrient Deficiencies and Depletion of Nutrients
		EXPECTED_STRINGS.put("Nutrient Deficiencies and Depletion of Nutrients_Links",
				Arrays.asList(
				"http://demo-meschinowellness.azurewebsites.net/LearnEarn/LearningInfoByModule/187",
				"http://demo-meschinowellness.azurewebsites.net/MyWellnessWallet/MyHealthProfile/Pledge?healthActivityId=46",
				"http://demo-meschinowellness.azurewebsites.net/LearnEarn/LearningInfoByModule/188",
				"http://demo-meschinowellness.azurewebsites.net/MyWellnessWallet/MyHealthProfile/StressTracker?healthActivityId=13",
				"https://meschinowellness.blob.core.windows.net/downloads/02Nutr%20Defic%20and%20Depl_REFERENCES.pdf"));

		// Bold strings Drug-Nutrient Interactions and Precautions
		EXPECTED_STRINGS.put("Drug-Nutrient Interactions and Precautions_Strong", 
				Arrays.asList("Drug-Nutrient Interactions and Precautions",
					"Various sections of your Meschino Health and Wellness report",
					"these warning statements will be listed immediately below this paragraph. If no warning appears then you may consider proceeding with the supplement considerations that appear in various sections of your feedback report. However, you should always consult a health care professional before making any change to your diet, exercise or supplementation program.",
					"If no warning appears then you may consider proceeding with the supplement considerations that appear in various sections of your feedback report. However, you should always consult a health care professional before making any change to your diet, exercise or supplementation program."));

		// Italics Drug-Nutrient Interactions and Precautions
		EXPECTED_STRINGS.put("Drug-Nutrient Interactions and Precautions_Italics", 
				Arrays.asList(
						"Have you ever had an allergic reaction to a vitamin supplement in the past?",
						"Do you suffer from a hemolytic anemia due to glucose–6 phosphate dehydrogenase deficiency?",
						"Do you suffer from kidney failure or are on dialysis treatment?",
						"Do you have Wilson?s disease?",
						"Do you have hemochromatosis?",
						"Have you received an organ transplant of any kind?",
						"Are you taking an immuno–suppressive drug (ie cyclosporin)?",
						"Have you ever been diagnosed with Crohn?s Disease or Ulcerative Colitis?",
						"Are you an insulin–dependent diabetic?",
						"Do you have only one functioning kidney (due to one kidney being removed or one kidney known to be non–functional)?",
						"Are you a diabetic or have known blood sugar regulation problems?"));

		// Bold strings Family Health History
		EXPECTED_STRINGS.put("Family Health History_Strong",
				Arrays.asList("You indicated that there is a family history of Alzheimer’s disease or dementia.",
						"You indicated that there is a family history of Parkinson’s disease.",
						"You indicated that a first degree relative sustained a heart attack before age 60.",
						"You indicated that there is a family history of colon cancer."));

		// Links Family Health History
		EXPECTED_STRINGS.put("Family Health History_Links",
				Arrays.asList());

		// Bold strings Healthy Aging Supplement Considerations and Early
		// Detection
		EXPECTED_STRINGS.put("Healthy Aging Supplement Considerations and Early Detection_Strong",
				Arrays.asList("Men age 50 - 54",
					"Prostate Support Nutrients",
					"Glucosamine Supplement With Natural Anti-Inflammatory Agents",
					"Coenzyme Q10 and Hawthorn Supplement",
					"Immune and Detoxification Support",
					"PSA Blood Test:",
					"Colonoscopy:"));
		

		// Bold strings Basic Blood Tests of Significance
		EXPECTED_STRINGS.put("Basic Blood Tests of Significance_Strong",
				Arrays.asList());

		// Links Basic Blood Tests of Significance
		EXPECTED_STRINGS.put("Basic Blood Tests of Significance_Links",
				Arrays.asList("https://meschinowellness.blob.core.windows.net/downloads/basic_blood_tests.pdf",
						"https://meschinowellness.blob.core.windows.net/downloads/blood_interp.pdf"));

	}


	private void validateLinkAndRelatedPage(String sectionName, int sectionIndex, int elementIndex,
			String headingContainer, String headingSelector, String buttonSelector) {
		ArrayList<WebElement> list = getListOfLinks(sectionName, sectionIndex);
		System.out.println("Text = " + list.get(elementIndex).getText());
		String currentLinkText = list.get(elementIndex).getText(); // Eg:DietaryAssessment
		WebElement currentLIItem = list.get(elementIndex);
		// Find the anchor tag
		WebElement anchorTag = currentLIItem.findElement(By.tagName("a"));
		Assert.assertNotNull(anchorTag);
		// continue execution and click on links
		JavascriptExecutor je = (JavascriptExecutor) driver;
		je.executeScript("arguments[0].click();", anchorTag);

		// Goes to the next page, get the header in the next page
		WebElement headingContainerElement = driver.findElement(By.className(headingContainer));
		Assert.assertNotNull(headingContainerElement);

		// Get the heading text (h3)
		WebElement headingText = headingContainerElement.findElement(By.tagName(headingSelector));
		Assert.assertNotNull(headingText);
		System.out.println("Heading Text = " + headingText.getText() + ", Link Text = " + currentLinkText);
		Assert.assertEquals(headingText.getText(), currentLinkText);

		// Query map for strong strings

		List<String> expectedBoldStrings = EXPECTED_STRINGS.get(currentLinkText + "_Strong");

		if (expectedBoldStrings != null) {
			WebElement container = driver.findElement(By.className(CONTAINER_SELECTOR));
			List<WebElement> boldStringsInSection = (List<WebElement>) container.findElements(By.tagName("strong"));

			List<String> listOfBoldTextOnPage = new ArrayList<String>();
			for (WebElement element : boldStringsInSection) {
				listOfBoldTextOnPage.add(element.getText().trim());
			}
			System.out.println("START UI Bold Text List===>> ");
			for (String BoldString : listOfBoldTextOnPage) {
				System.out.println("\""+ BoldString + "\",");
			}
			System.out.println("END UI Bold Text List===>> ");
			
			for (String expectedBoldString : expectedBoldStrings) {

				if (listOfBoldTextOnPage.stream().filter(x -> x.contains(expectedBoldString)).count() > 0) {
					System.out.println("Validated Bold Text===>> " + expectedBoldString);
				} else {
					System.out.println("Not Validated Bold Text===>>  " + expectedBoldString);
				}
			}
		}

		// Query map for Link Texts
		List<String> expectedLinkTexts = EXPECTED_STRINGS.get(currentLinkText + "_Links");

		if (expectedLinkTexts != null) {
			WebElement container1 = driver.findElement(By.className(CONTAINER_SELECTOR));
			List<WebElement> linkTextsInSection = (List<WebElement>) container1.findElements(By.tagName("a"));

			List<String> listOfLinkTextOnPage = new ArrayList<String>();
			for (WebElement element : linkTextsInSection) {
				listOfLinkTextOnPage.add(element.getAttribute("href"));
			}
			System.out.println("START UI LINK Text List===>> ");
			for (String links : listOfLinkTextOnPage) {
				System.out.println("\""+ links + "\",");
			}
			System.out.println("END UI LINK Text List===>> ");
			
			for (String expectedLinkText : expectedLinkTexts) {

				if (listOfLinkTextOnPage.stream().filter(x -> x.contains(expectedLinkText)).count() > 0) {
					System.out.println("Validated Link Text===>> " + expectedLinkText);
				} else {
					System.out.println("Not Validated Link Text===>>  " + expectedLinkText);
				}
			}
		}
		// Query map for ItalicTexts
		List<String> expectedItalicTexts = EXPECTED_STRINGS.get(currentLinkText + "_Italics");
		if (expectedItalicTexts != null) {
			WebElement container2 = driver.findElement(By.className(CONTAINER_SELECTOR));
			List<WebElement> italicTextsInSection = (List<WebElement>) container2.findElements(By.tagName("em"));

			List<String> listOfItalicTextOnPage = new ArrayList<String>();
			for (WebElement element : italicTextsInSection) {
				listOfItalicTextOnPage.add(element.getText().trim());
			}
			System.out.println("START UI Italic Text List===>> ");
			for (String italics : listOfItalicTextOnPage) {
				System.out.println("\""+ italics + "\",");
			}
			System.out.println("END UI Italic Text List===>> ");
			for (String expectedItalicText : expectedItalicTexts) {
				if (listOfItalicTextOnPage.stream().filter(x -> x.contains(expectedItalicText)).count() > 0) {
					System.out.println("Validated Italic Text===>> " + expectedItalicText);
				} else {
					System.out.println("Not Validated Italic Text===>>  " + expectedItalicText);
				}
			}
		}
		
		System.out.println("Validated " + currentLinkText + ", Going back for the rest!!");

		// Go back
		WebElement backButton = headingContainerElement.findElement(By.tagName(buttonSelector));
		backButton.click();
	}

	@AfterMethod
	public void logout(ITestResult result) throws Exception {
		// Verify if test fails
		if (ITestResult.FAILURE == result.getStatus()) {
			try {
				// Create reference of TakesScreenshot
				TakesScreenshot ts = (TakesScreenshot) driver;
				// capture screenshot
				File source = ts.getScreenshotAs(OutputType.FILE);
				// Copy files to specific location to store screenshot in our
				// project home directory
				// result.getName() will return name of test case so that
				// screenshot name will be same
				File file = new File("./Screenshots/" + result.getName() + ".png");
				FileUtils.copyFile(source, file);
				Throwable errorDetail = result.getThrowable();
				System.out.println("Screenshot taken");
			} catch (Exception e) {
				System.out.println("Exception while taking screenshot " + e.getMessage());
			}
		}

		// close application
		// d.quit();
	}

}
