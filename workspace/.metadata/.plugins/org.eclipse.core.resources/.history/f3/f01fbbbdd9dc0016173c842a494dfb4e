package testproject;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

public class Meschinowellness_F2MyWellnessReport_updated {

	private static final String CONTAINER_SELECTOR = "white-box-cms-wrap";
	WebDriver driver;

	@BeforeTest
	public void Setup() throws Exception {
		// Launch browser
		driver = new FirefoxDriver();
		driver.manage().window().maximize();
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().implicitlyWait(1, TimeUnit.MINUTES);
		driver.get("http://demo-meschinowellness.azurewebsites.net/Account/Login");
		driver.manage().timeouts().implicitlyWait(1, TimeUnit.MINUTES);
	}

	@Test(priority = 1)
	public void login() throws Exception {
		// Enter Username
		driver.findElement(By.id("UserName")).click();
		Thread.sleep(1000);
		driver.findElement(By.id("UserName")).sendKeys("F2HRAtest@gmail.com");
		// Enter password
		driver.findElement(By.xpath("/html/body/div[3]/form/div[2]/div/input")).click();
		driver.findElement(By.xpath("/html/body/div[3]/form/div[2]/div/input")).sendKeys("Test123@");
		// Click on login button
		driver.findElement(By.xpath("/html/body/div[3]/form/div[3]/div/div[2]/button")).click();
		driver.manage().timeouts().implicitlyWait(1, TimeUnit.MINUTES);
		// Click on close button
		driver.findElement(By.xpath("/html/body/div[8]/div/div/div/div/div[2]/div/a[2]")).click();
		Thread.sleep(5000);
		// Verfiy Dashboard
		if (driver.findElement(By.id("dashboard")) != null) {
			System.out.println("Dashboard Title  is verified");
		} else {
			System.out.println("Dashboard Title  is not  Present");
		}
		Thread.sleep(5000);
		System.out.println("User login successful");
	}

	@Test(priority = 2)
	public void MyHealthRiskConsiderations() throws Exception {
		// Click on My Wellness Report tab
		driver.findElement(By.id("riskreportNew")).click();
		Thread.sleep(5000);
		// Click on what is this link
		WebElement Linkcontainer = driver.findElement(By.className("bmi-list"));
		WebElement whatisthislink = Linkcontainer.findElement(By.id("btnBioAgeScorePopup"));
		whatisthislink.click();
		// Click on close button
		driver.findElement(By.xpath("/html/body/div[8]/div/div/div/div/div/div/div/a")).click();
		Thread.sleep(5000);
		// Click on MHR what is this link
		WebElement MhrScorePopup = Linkcontainer.findElement(By.id("btnMHRScorePopup"));
		MhrScorePopup.click();
		Thread.sleep(3000);
		// Click on MHR close button
		driver.findElement(By.xpath("/html/body/div[8]/div/div/div/div/div[2]/div/a")).click();
		Thread.sleep(5000);
		ArrayList<WebElement> list = getListOfLinks("tracking-tools", 0);
		Assert.assertNotEquals(0, list.size());
		for (int i = 0, l = list.size(); i < l; i++) {
			validateLinkAndRelatedPage("tracking-tools", 0, i, "wbc-heading", "h3", "button");
		}
		System.out.println("MyHealthRiskConsiderations test completed.");
		Thread.sleep(10000);
	}

	@Test(priority = 3)
	public void MyHealthIssues() throws Exception {
		System.out.println("MyHealthIssues test started.");
		// d.manage().timeouts().implicitlyWait(1, TimeUnit.MINUTES);
		// Click on My Wellness Report tab
		// d.findElement(By.id("riskreportNew")).click();
		ArrayList<WebElement> list = getListOfLinks("tracking-tools", 1);
		Assert.assertNotEquals(0, list.size());
		for (int i = 0, l = list.size(); i < l; i++) {
			validateLinkAndRelatedPage("tracking-tools", 1, i, "active-goal-heading", "h2", "a");
		}
	}

	private ArrayList<WebElement> getListOfLinks(String sectionName, int index) {
		ArrayList<WebElement> sections = (ArrayList<WebElement>) driver.findElements(By.className(sectionName));
		if (sections.size() > 0) {
			WebElement section = sections.get(index);
			// Get the track-list
			WebElement listContainer = (WebElement) section.findElements(By.className("track-list")).get(0);
			ArrayList<WebElement> list = (ArrayList<WebElement>) listContainer.findElements(By.tagName("li"));
			return list;
		}
		return null;
	}

	/*
	 * Map Dietary Assessment_Links - List<String> Dietary Assessment_Italics -
	 * List<String> Dietary Assessment_Strong - List<String>
	 */

	public static Map<String, List<String>> EXPECTED_STRINGS = new HashMap<String, List<String>>();
	{
		/**
		 * Map Format: Key = LinkText_<format> - Eg: Dietary Assessment_Strong,
		 * Dietary Assessment_Italics Value = List of expected strings
		 */
		// Bold strings Dietary Assessment
		EXPECTED_STRINGS.put("Dietary Assessment_Strong",
				Arrays.asList("Introduction to Your Dietary Assessment", "The Meschino Optimal Living Program",
						"Based upon your responses", 
						"13.00.", 
						"It is impressive that you have maintained a low intake of whole egg consumption.",
						"It is impressive that your diet is not high in fried foods.",
						"It is impressive that you have maintained a low intake of high fat pastries and related treats.",
						"It is impressive that you have maintained a low intake of fried snack foods and regular chocolate products.",
						"It is impressive that you have maintained a low intake of highly refined sugar-containing foods and beverages.",
						"Your intake of vegetables appears to be consistent with practices associated with a healthy diet.",
						"Your diet appears to lack proper attention to fruit intake.",
						"Your low intake of alcohol is most impressive from a health-risk standpoint.",
						"You indicated that you consume high fat meat products only 2-3 times per month, and seldom, if ever consume high fat dairy products, on average.",
						"It is most impressive that you do not use butter on bread products or on baked potatoes or vegetables."));

		// Links Dietary Assessment
		EXPECTED_STRINGS.put("Dietary Assessment_Links",
				Arrays.asList(""));

		// Bold strings Body Composition
		EXPECTED_STRINGS.put("Body Composition_Strong",
				Arrays.asList("Your Body Mass Index is:  20.60", 
						"This is a good reading and is associated with a low risk for the development of many degenerative conditions",
						"Your present waist circumference is", 
						"30."));

		// Bold strings Physical Activity
		EXPECTED_STRINGS.put("Physical Activity_Strong",
				Arrays.asList("Endurance / Aerobic Activity",
						"You indicated that you perform endurance/aerobic exercise for 120 to 150 minutes per week, on average.",
						"You indicated that you regularly perform resistance or strength training a minimum of 4 times a week.",
						"You indicated that you regularly perform flexibility or stretching exercises a minimum of 4 times per week.",
						"Flexibility / Stretching Exercise"));

		// Links Physical Activity
		EXPECTED_STRINGS.put("Physical Activity_Links",
				Arrays.asList("http://demo-meschinowellness.azurewebsites.net/MyWellnessWallet/MyHealthProfile/StepTracker?healthActivityId=10",
						"https://meschinowellness.blob.core.windows.net/downloads/protein_food_chart.pdf",
						"https://meschinowellness.blob.core.windows.net/downloads/StrengthTraining2.pdf"));

		// Bold strings Basic Supplement Considerations
		EXPECTED_STRINGS.put("Basic Supplement Considerations_Strong",
				Arrays.asList());

		// Links Basic Supplement Considerations
		EXPECTED_STRINGS.put("Basic Supplement Considerations_Links",
				Arrays.asList("http://www.nature.com/nrc/journal/v4/n3/full/nrc1298.html",
						"http://www.pnas.org/content/110/23/9523.short",
						"http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0012244",
						"http://www.sciencedaily.com/releases/2010/09/100912213050.htm"));

		// Bold strings Nutrient Deficiencies and Depletion of Nutrients
		EXPECTED_STRINGS.put("Nutrient Deficiencies and Depletion of Nutrients_Strong", 
				Arrays.asList("Nutrient Deficiencies and Depletion of Nutrients",
						"Damage to the Skin from Sunlight and Tanning Beds",
						"Cracks at the outer margins (corners) of the lips can be caused or aggravated by a Vitamin B2 or vitamin B6 deficiency",
						"A sore or burning tongue can be caused by deficiencies in Vitamins B2, B3, B6, and/or B12.",
						"A reduced ability to taste food is can be caused by a marginal zinc deficiency.",
						"Gums that bleed easily is often a sign of Vitamin C deficiency. ",
						"From a nutritional standpoint skin that bruises easily can be caused by a deficiency ",
						"Slow healing capability can be an indication",
						"Feeling chronically fatigued ",
						"Irregular eating patterns often results in inadequate intake of many essential vitamins and minerals,",
						"Calorie restricted diets cannot provide optimal intake levels of all vitamins and minerals",
						"Feeling run down and/or in a weakened state of immunity",
						"Hair falling out easily can be from genetic or hormonal causes",
						"Your regular use of antacid drugs is associated with depletion of the following nutrients:",
						"Your regular use of cholesterol-lowering bile acid sequestrant drugs is associated with depletion of the following nutrients: ",
						"Your regular use of beta-blocker drugs",
						"Your regular use of digitalis is associated with depletion of the following nutrients: Vitamin B1.",
						"Your regular use of corticosteroids is associated with depletion of the following nutrients: ",
						"Your regular use of indomethacin is associated with depletion of the following nutrients",
						"Your regular use of diuretic drugs is associated with depletion of the following nutrients:",
						"Your regular use of L-dopa is associated with depletion of the following nutrients:",
						"The asthmatic drug theophylline decreases",
						"Stress"));

		// Links Nutrient Deficiencies and Depletion of Nutrients
		EXPECTED_STRINGS.put("Nutrient Deficiencies and Depletion of Nutrients_Links",
				Arrays.asList("http://demo-meschinowellness.azurewebsites.net/LearnEarn/LearningInfoByModule/188",
				"http://demo-meschinowellness.azurewebsites.net/MyWellnessWallet/MyHealthProfile/StressTracker?healthActivityId=13",
				"https://meschinowellness.blob.core.windows.net/downloads/02Nutr%20Defic%20and%20Depl_REFERENCES.pdf"));

		// Bold strings Drug-Nutrient Interactions and Precautions
		EXPECTED_STRINGS.put("Drug-Nutrient Interactions and Precautions_Strong", 
				Arrays.asList("Drug-Nutrient Interactions and Precautions",
						"Drug-Nutrient Interactions and Precautions",
						"Various sections of your Meschino Health and Wellness report"));

		// Italics Drug-Nutrient Interactions and Precautions
		EXPECTED_STRINGS.put("Drug-Nutrient Interactions and Precautions_Italics", 
				Arrays.asList(
				"\"Are you taking the drug digitalis or digoxin?\"", "\"Do you have an active ulcer?\"",
				"\"Are you presently taking any anti-inflammatory drugs, other than acetaminophen, or blood thinners (anti-coagulants)?\"","\"Do you have a pacemaker?\"",
				"\"Are you taking drugs to correct a heart arrhythmia problem?\"","\"Are you allergic to aspirin?\"",
				"\"Are you taking any medications for Alzheimer's or dementia?\"",
				"\"Do you suffer from hemophilia?\"","\"Are you presently experiencing a flare up of gout (gouty arthritis)?\"",
				"\"Do you have advanced liver disease?\"",
				"\"Do you have hyperparathyroidism, sarcoidosis, active tuberculosis, silicosis, or lymphoma?\"",
				"\"Are you presently taking any chemotherapy drugs or undergoing radiation therapy for the treatment of cancer?\"",
				"\"Are you currently taking any drugs for depression or to treat a psychological disorder of any kind (etc. bipolar disease, schizophrenia, obsessive compulsive disorder etc.)?\"","\"Are you taking the drug accutane (usually for acne)?\"",
				"\"Are you presently taking a narcotic drug (e.g. Percodan, Percocet, Oxycontin, Oxycodone, Morphine etc)?\"",
				"\"Are you presently taking an anti-anxiety drug (e.g. benzodiazepine such as Valium, Ativan etc)?\"",
				"\"Are you presently taking a sleep aid medication (e.g. Sonata, Ambien, etc)?\"",
				"\"Are you known to be allergic to morphine or opiod-containing drugs?\"",
				"\"Are you taking radioactive iodine to treat thyroid cancer, Graves disease or other thyroid disorder?\"",
				"\"Are you taking vitamin-K blocking anti-coagulants (e.g. Coumadin, Warfarin, Jantoven, Marevan, Lawarin, Waran, Warfant)?\"",
				"\"Are you taking a drug a called methotrexate?\""));

		// Bold strings Family Health History
		EXPECTED_STRINGS.put("Family Health History_Strong",
				Arrays.asList("You indicated that there is a family history of breast cancer."));

		// Links Family Health History
		EXPECTED_STRINGS.put("Family Health History_Links",
				Arrays.asList("https://meschinowellness.blob.core.windows.net/downloads/27F%20FHH%20Breast-Colon.pdf"));

		// Bold strings Healthy Aging Supplement Considerations and Early
		// Detection
		EXPECTED_STRINGS.put("Healthy Aging Supplement Considerations and Early Detection_Strong",
				Arrays.asList("Mammogram:  After age 40 it advisable to speak to your doctor about having a mammogram.",
						"Because you are over 45 you should consider a supplement providing coenzyme Q10 and hawthorn for heart health."));

		// Bold strings Basic Blood Tests of Significance
		EXPECTED_STRINGS.put("Basic Blood Tests of Significance_Strong",
				Arrays.asList());

		// Links Basic Blood Tests of Significance
		EXPECTED_STRINGS.put("Basic Blood Tests of Significance_Links",
				Arrays.asList("https://meschinowellness.blob.core.windows.net/downloads/basic_blood_tests.pdf",
						"https://meschinowellness.blob.core.windows.net/downloads/blood_interp.pdf"));

	}

	private void validateLinkAndRelatedPage(String sectionName, int sectionIndex, int elementIndex,
			String headingContainer, String headingSelector, String buttonSelector) {
		ArrayList<WebElement> list = getListOfLinks(sectionName, sectionIndex);
		System.out.println("Text = " + list.get(elementIndex).getText());
		String currentLinkText = list.get(elementIndex).getText(); // Eg:DietaryAssessment
		WebElement currentLIItem = list.get(elementIndex);
		// Find the anchor tag
		WebElement anchorTag = currentLIItem.findElement(By.tagName("a"));
		Assert.assertNotNull(anchorTag);
		// continue execution and click on links
		JavascriptExecutor je = (JavascriptExecutor) driver;
		je.executeScript("arguments[0].click();", anchorTag);

		// Goes to the next page, get the header in the next page
		WebElement headingContainerElement = driver.findElement(By.className(headingContainer));
		Assert.assertNotNull(headingContainerElement);

		// Get the heading text (h3)
		WebElement headingText = headingContainerElement.findElement(By.tagName(headingSelector));
		Assert.assertNotNull(headingText);
		System.out.println("Heading Text = " + headingText.getText() + ", Link Text = " + currentLinkText);
		Assert.assertEquals(headingText.getText(), currentLinkText);

		// Query map for strong strings

		List<String> expectedBoldStrings = EXPECTED_STRINGS.get(currentLinkText + "_Strong");

		if (expectedBoldStrings != null) {
			WebElement container = driver.findElement(By.className(CONTAINER_SELECTOR));
			List<WebElement> boldStringsInSection = (List<WebElement>) container.findElements(By.tagName("strong"));

			List<String> listOfBoldTextOnPage = new ArrayList<String>();
			for (WebElement element : boldStringsInSection) {
				listOfBoldTextOnPage.add(element.getText().trim());
			}
			for (String expectedBoldString : expectedBoldStrings) {

				if (listOfBoldTextOnPage.contains(expectedBoldString)) {
					System.out.println("Validated Bold Text===>> " + expectedBoldString);
				} else {
					System.out.println("Not Validated Bold Text===>>  " + expectedBoldString);
				}
			}
		}

		// Query map for Link Texts
		List<String> expectedLinkTexts = EXPECTED_STRINGS.get(currentLinkText + "_Links");

		if (expectedLinkTexts != null) {
			WebElement container1 = driver.findElement(By.className(CONTAINER_SELECTOR));
			List<WebElement> linkTextsInSection = (List<WebElement>) container1.findElements(By.tagName("a"));

			List<String> listOfLinkTextOnPage = new ArrayList<String>();
			for (WebElement element : linkTextsInSection) {
				listOfLinkTextOnPage.add(element.getAttribute("href"));
			}

			for (String expectedLinkText : expectedLinkTexts) {

				if (listOfLinkTextOnPage.contains(expectedLinkText)) {
					System.out.println("Validated Link Text===>> " + expectedLinkText);
				} else {
					System.out.println("Not Validated Link Text===>>  " + expectedLinkText);
				}
			}
		}
		// Query map for ItalicTexts
		List<String> expectedItalicTexts = EXPECTED_STRINGS.get(currentLinkText + "_Italics");
		if (expectedItalicTexts != null) {
			WebElement container2 = driver.findElement(By.className(CONTAINER_SELECTOR));
			List<WebElement> italicTextsInSection = (List<WebElement>) container2.findElements(By.tagName("em"));

			List<String> listOfItalicTextOnPage = new ArrayList<String>();
			for (WebElement element : italicTextsInSection) {
				listOfItalicTextOnPage.add(element.getText().trim());
			}

			for (String expectedItalicText : expectedItalicTexts) {

				if (listOfItalicTextOnPage.contains(expectedItalicText)) {
					System.out.println("Validated Italic Text===>> " + expectedItalicText);
				} else {
					System.out.println("Not Validated Italic Text===>>  " + expectedItalicText);
				}
			}
		}
		
		System.out.println("Validated " + currentLinkText + ", Going back for the rest!!");

		// Go back
		WebElement backButton = headingContainerElement.findElement(By.tagName(buttonSelector));
		backButton.click();
	}

	@AfterMethod
	public void logout(ITestResult result) throws Exception {
		// Verify if test fails
		if (ITestResult.FAILURE == result.getStatus()) {
			try {
				// Create reference of TakesScreenshot
				TakesScreenshot ts = (TakesScreenshot) driver;
				// capture screenshot
				File source = ts.getScreenshotAs(OutputType.FILE);
				// Copy files to specific location to store screenshot in our
				// project home directory
				// result.getName() will return name of test case so that
				// screenshot name will be same
				File file = new File("./Screenshots/" + result.getName() + ".png");
				FileUtils.copyFile(source, file);
				Throwable errorDetail = result.getThrowable();
				System.out.println("Screenshot taken");
			} catch (Exception e) {
				System.out.println("Exception while taking screenshot " + e.getMessage());
			}
		}

		// close application
		// d.quit();
	}

}
