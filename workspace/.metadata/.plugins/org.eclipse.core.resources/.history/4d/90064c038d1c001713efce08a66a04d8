import java.io.File;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.ObjectUtils.Null;
import org.testng.annotations.Test;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
//import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import org.testng.ITestResult;
import org.testng.annotations.AfterMethod;

import com.google.common.base.Function;
import org.testng.annotations.BeforeTest;
import org.openqa.selenium.interactions.Actions;

public class Meschinowellness_DAFoodTrackerQuickTool {

    String driverPath = "C:\\chromedriver_win32\\";
    private String UserName = "M1HRAtest@gmail.com"; 
    private String Password = "Test123@";
    private String Url = "http://demo-meschinowellness.azurewebsites.net/Account/Login";
    //"http://stage-meschinowellness.azurewebsites.net/Account/Login"
    WebDriver d;
    private CharSequence click;
    int weightValue = 0;
    @BeforeTest
    public void Setup() throws Exception {
        // Launch browser
        System.out.println("Launching  browser"); 
        //System.setProperty("webdriver.gecko.driver", driverPath+"geckodriver.exe");
        System.setProperty("webdriver.chrome.driver", driverPath + "chromedriver.exe");
        //d = new FirefoxDriver();
        d = new  ChromeDriver();
        d.manage().window().maximize();
        d.manage().deleteAllCookies();
        d.manage().timeouts().implicitlyWait(1, TimeUnit.MINUTES);
        d.get(Url);
        d.manage().timeouts().implicitlyWait(1, TimeUnit.MINUTES);
    }
    @Test(priority = 1)
    public void login() throws Exception {
        // Enter Username
        d.findElement(By.id("UserName")).click();
        Thread.sleep(1000);
        d.findElement(By.id("UserName")).sendKeys(UserName);
        // Enter password
        d.findElement(By.id("Password")).click();
        d.findElement(By.id("Password")).sendKeys(Password);
        // Click on login button
        d.findElement(By.id("btnLogin")).click();
        d.manage().timeouts().implicitlyWait(1, TimeUnit.MINUTES);
        // Verfiy Dashboard
        if (d.findElement(By.id("dashboard")) != null) {
            System.out.println("Dashboard Title is verified");
        } else {
            System.out.println("Dashboard Title is not Present");
        }
        Thread.sleep(3000);
        System.out.println("User login successful");
        ClosePopupContent("chklistModelVideoPopup","close");
        Thread.sleep(2000);
    }

    @Test(priority = 2)
    public void DietActivityFoodPlan() throws Exception {
        CasesDAF(2, 1); // TFS 4825, No of servings = 2,  for future date
        /*
        Thread.sleep(4000);
        System.out.println("Back to page : Diet & Activity manager loaded");
        CasesDAF(1, 0);//TFS 4786 No of servings = 1, for current date
        Thread.sleep(6000);
        WebElement backButton = d.findElement(By.cssSelector("a[href*='/MyWellnessWallet']"));
        backButton.click();
        Thread.sleep(4000);
        */
        
    }

    @Test(priority = 3)
    public void DietActivityFoodRemoveItem() throws Exception {
        WebElement DietActivityLink =  d.findElement(By.cssSelector("a[href*='/DietActivity/FoodDiary']"));
        DietActivityLink.click();
        System.out.println("Varified page : Diet & Activity manager loaded");
        Thread.sleep(4000);
        
        WebElement FoodListTbl = d.findElement(By.id("breakfast"));
        List<WebElement> tr_collection = FoodListTbl.findElements(By.xpath("//tbody/tr"));//By.cssSelector("td[class='/MyWellnessWallet']");
        System.out.println("NUMBER OF ROWS = " +tr_collection.size());
        
        WebElement FirstRowElement = tr_collection.get(0);
        Thread.sleep(1000);
        WebElement Delbtn = FirstRowElement.findElement(By.linkText("Delete"));
        Delbtn.click();
        System.out.println("Delete first item : " +Delbtn.getText());
        Thread.sleep(8000);
        
    }

        public void CasesDAF(int servings, int dateIncrement) throws Exception
        {
            System.out.println("Varified page : Diet & Activity manager loaded");
            WebElement divQuickTool =  d.findElement(By.id("quick-food"));
            WebElement DietActivityQuickLink =  divQuickTool.findElement(By.id("quicktool"));
            DietActivityQuickLink.click();
            Thread.sleep(4000);
            System.out.println("Varified page : Diet & Activity Add Food Popup");
            Thread.sleep(4000);
            
            WebElement formdropdown = divQuickTool.findElement(By.className("dropdown-menu"));
            System.out.println("Form Drop down : Found");
            // food_desc
            WebElement food_desc = formdropdown.findElement(By.className("food_desc"));
            ((JavascriptExecutor)d).executeScript("arguments[0].setAttribute('value', 'Test Desc');", food_desc);
            System.out.println("food_desc : Test" );

            // total_cal
            WebElement total_cal = formdropdown.findElement(By.className("total_cal"));
            ((JavascriptExecutor)d).executeScript("arguments[0].setAttribute('value', '"+servings+"');", total_cal);
            System.out.println("No. Servings : " + servings );

            LocalDate Date = LocalDate.now().plusDays(dateIncrement);
            DateTimeFormatter formatters = DateTimeFormatter.ofPattern("MM/d/uuuu");
            String datestring = Date.format(formatters);
            Thread.sleep(4000);
            System.out.println("Future Date: " + datestring);
            ((JavascriptExecutor)d).executeScript("arguments[0].setAttribute('value', '"+datestring+"');", Inputs.get(1));
            Thread.sleep(6000);
            WebElement addbtn =  formdropdown.findElement(By.linkText("Save"));
            Actions select = new Actions(d);
            select.clickAndHold(addbtn).build().perform();
            addbtn.click();
           
            if(Inputs.get(1).getText() == ""){
                System.out.println("Verified that, system does not accept the future date");
            }
            else
            {
                System.out.println("System accept for current date");
                System.out.println("Verified that, system successfully adds the food item under Breakfast and food value are also added in the total.");
            }
            Thread.sleep(4000);
            
        }
        
        //Method to click  Close Popup
        public void ClosePopupContent(String ElementId, String className){
        try
        {
            Thread.sleep(2000);
            WebElement popupElement = d.findElement(By.id(ElementId));
            WebElement element =  popupElement.findElement(By.className(className));//.click();
            ((JavascriptExecutor)d).executeScript("arguments[0].click();", element);
        }
        catch(Exception ex)
        {
            System.out.println("Eror on close button: " + ex.getMessage());
        }
            System.out.println("Popup Closed Clicked " + className);    

        }
    public void CloseOk() throws InterruptedException  {
        WebElement OkButton = d.findElement(By.className("btn-primary"));
        System.out.println("Ok Button : " + OkButton.getText());
        Thread.sleep(3000);
        ((JavascriptExecutor)d).executeScript("arguments[0].click();", OkButton);
    }
    @AfterMethod
    public void logout(ITestResult result) throws Exception {
        // Verify if test fails
        if (ITestResult.FAILURE == result.getStatus()) {
        try {
            // Create reference of TakesScreenshot
            TakesScreenshot ts = (TakesScreenshot) d;
            // capture screenshot
            File source = ts.getScreenshotAs(OutputType.FILE);
            // Copy files to specific location to store screenshot in our
            // project home directory
            // result.getName() will return name of test case so that
            // screenshot name will be same
            File file = new File("./Screenshots/" + result.getName() + ".png");
            FileUtils.copyFile(source, file);
            Throwable errorDetail = result.getThrowable();
            System.out.println("Screenshot taken");
            } catch (Exception e) {
                System.out.println("Exception while taking screenshot " + e.getMessage());
            }
        }
        // close application
        // d.quit();
    }

}


